{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState = null){\n        this.board = initialState || this.createEmptyBoard();\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    createEmptyBoard() {\n        const board = [];\n        for(let i = 0; i < 4; i++)board.push([\n            0,\n            0,\n            0,\n            0\n        ]);\n        return board;\n    }\n    moveLeft() {\n        const oldBoard = this.board.map((row)=>[\n                ...row\n            ]);\n        let scoreThisMove = 0;\n        for(let i = 0; i < this.board.length; i++){\n            const row = this.board[i];\n            const filtered = row.filter((cell)=>cell !== 0);\n            const newRow = [];\n            let j = 0;\n            while(j < filtered.length)if (filtered[j] === filtered[j + 1]) {\n                const merged = filtered[j] * 2;\n                newRow.push(merged);\n                scoreThisMove += merged;\n                j += 2;\n            } else {\n                newRow.push(filtered[j]);\n                j += 1;\n            }\n            while(newRow.length < 4)newRow.push(0);\n            this.board[i] = newRow;\n        }\n        const boardChanged = this.board.some((row, i)=>row.some((cell, j)=>cell !== oldBoard[i][j]));\n        if (boardChanged) {\n            this.addRandomTile();\n            this.score += scoreThisMove;\n        }\n        if (this.board.some((row)=>row.includes(2048))) this.status = \"win\";\n    }\n    moveRight() {\n        const oldBoard = this.board.map((row)=>[\n                ...row\n            ]);\n        let scoreThisMove = 0;\n        for(let i = 0; i < this.board.length; i++){\n            const row = [\n                ...this.board[i]\n            ].reverse();\n            const filtered = row.filter((cell)=>cell !== 0);\n            const newRow = [];\n            let j = 0;\n            while(j < filtered.length)if (filtered[j] === filtered[j + 1]) {\n                const merged = filtered[j] * 2;\n                newRow.push(merged);\n                scoreThisMove += merged;\n                j += 2;\n            } else {\n                newRow.push(filtered[j]);\n                j += 1;\n            }\n            while(newRow.length < 4)newRow.push(0);\n            this.board[i] = newRow.reverse();\n        }\n        const boardChanged = this.board.some((row, i)=>row.some((cell, j)=>cell !== oldBoard[i][j]));\n        if (boardChanged) {\n            this.addRandomTile();\n            this.score += scoreThisMove;\n        }\n        if (this.board.some((row)=>row.includes(2048))) this.status = \"win\";\n    }\n    moveUp() {\n        const oldBoard = this.board.map((row)=>[\n                ...row\n            ]);\n        let scoreThisMove = 0;\n        for(let j = 0; j < 4; j++){\n            const column = [];\n            for(let i = 0; i < 4; i++)column.push(this.board[i][j]);\n            const filtered = column.filter((cell)=>cell !== 0);\n            const newColumn = [];\n            let index = 0;\n            while(index < filtered.length)if (filtered[index] === filtered[index + 1]) {\n                const merged = filtered[index] * 2;\n                newColumn.push(merged);\n                scoreThisMove += merged;\n                index += 2;\n            } else {\n                newColumn.push(filtered[index]);\n                index += 1;\n            }\n            while(newColumn.length < 4)newColumn.push(0);\n            for(let i = 0; i < 4; i++)this.board[i][j] = newColumn[i];\n        }\n        const boardChanged = this.board.some((row, i)=>row.some((cell, j)=>cell !== oldBoard[i][j]));\n        if (boardChanged) {\n            this.addRandomTile();\n            this.score += scoreThisMove;\n        }\n        if (this.board.some((row)=>row.includes(2048))) this.status = \"win\";\n    }\n    moveDown() {\n        const oldBoard = this.board.map((row)=>[\n                ...row\n            ]);\n        let scoreThisMove = 0;\n        for(let j = 0; j < 4; j++){\n            const column = [];\n            for(let i = 0; i < 4; i++)column.push(this.board[i][j]);\n            const filtered = column.filter((cell)=>cell !== 0);\n            const newColumn = [];\n            let index = filtered.length - 1;\n            while(index >= 0)if (filtered[index] === filtered[index - 1]) {\n                const merged = filtered[index] * 2;\n                newColumn.unshift(merged);\n                scoreThisMove += merged;\n                index -= 2;\n            } else {\n                newColumn.unshift(filtered[index]);\n                index -= 1;\n            }\n            while(newColumn.length < 4)newColumn.unshift(0);\n            for(let i = 0; i < 4; i++)this.board[i][j] = newColumn[i];\n        }\n        const boardChanged = this.board.some((row, i)=>row.some((cell, j)=>cell !== oldBoard[i][j]));\n        if (boardChanged) {\n            this.addRandomTile();\n            this.score += scoreThisMove;\n        }\n        if (this.board.some((row)=>row.includes(2048))) this.status = \"win\";\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.board;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        this.board = this.createEmptyBoard();\n        this.score = 0;\n        this.status = \"playing\";\n        this.addRandomTile();\n        this.addRandomTile();\n    }\n    addRandomTile() {\n        const emptyCells = [];\n        for(let row = 0; row < 4; row++){\n            for(let col = 0; col < 4; col++)if (this.board[row][col] === 0) emptyCells.push({\n                row: row,\n                col: col\n            });\n        }\n        if (emptyCells.length > 0) {\n            const randomIndex = Math.floor(Math.random() * emptyCells.length);\n            const { row: row, col: col } = emptyCells[randomIndex];\n            const value = Math.random() < 0.9 ? 2 : 4;\n            this.board[row][col] = value;\n        }\n    }\n    isGameOver() {\n        for(let i = 0; i < 4; i++)for(let j = 0; j < 4; j++){\n            if (this.board[i][j] === 0) return false;\n            if (j < 3 && this.board[i][j] === this.board[i][j + 1]) return false;\n            if (i < 3 && this.board[i][j] === this.board[i + 1][j]) return false;\n        }\n        return true;\n    }\n    restart() {\n        this.start();\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\n\"use strict\";\nconst $09e991522ca7e64e$var$game = new (0, (/*@__PURE__*/$parcel$interopDefault($a5fd07fa01589658$exports)))();\nconst $09e991522ca7e64e$var$fieldElement = document.querySelector(\".game-field tbody\");\nconst $09e991522ca7e64e$var$scoreElement = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$messageElements = document.querySelectorAll(\".message-container .message\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$buttonStart = document.querySelector(\".button.start\");\n$09e991522ca7e64e$var$render();\nfunction $09e991522ca7e64e$var$render() {\n    $09e991522ca7e64e$var$fieldElement.innerHTML = \"\";\n    const state = $09e991522ca7e64e$var$game.getState();\n    for(let row = 0; row < state.length; row++){\n        const tr = document.createElement(\"tr\");\n        tr.classList.add(\"field-row\");\n        for(let col = 0; col < state[row].length; col++){\n            const value = state[row][col];\n            const cell = document.createElement(\"td\");\n            cell.classList.add(\"field-cell\");\n            if (value !== 0) {\n                cell.textContent = value;\n                cell.classList.add(`field-cell--${value}`);\n            }\n            tr.appendChild(cell);\n        }\n        $09e991522ca7e64e$var$fieldElement.appendChild(tr);\n    }\n    $09e991522ca7e64e$var$scoreElement.textContent = $09e991522ca7e64e$var$game.getScore();\n    const stats = $09e991522ca7e64e$var$game.getStatus();\n    $09e991522ca7e64e$var$messageElements.forEach((el)=>el.classList.add(\"hidden\"));\n    if (stats === \"win\") $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n    else if (stats === \"lose\") $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n    else if (stats === \"idle\") {\n        $09e991522ca7e64e$var$messageStart.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$buttonStart.textContent = \"Start\";\n        $09e991522ca7e64e$var$buttonStart.classList.add(\"start\");\n        $09e991522ca7e64e$var$buttonStart.classList.remove(\"restart\");\n    } else if (stats === \"playing\") {\n        $09e991522ca7e64e$var$buttonStart.textContent = \"Restart\";\n        $09e991522ca7e64e$var$buttonStart.classList.remove(\"start\");\n        $09e991522ca7e64e$var$buttonStart.classList.add(\"restart\");\n    }\n}\ndocument.addEventListener(\"keydown\", (ev)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() !== \"playing\") return;\n    if (ev.key === \"ArrowUp\") $09e991522ca7e64e$var$game.moveUp();\n    else if (ev.key === \"ArrowDown\") $09e991522ca7e64e$var$game.moveDown();\n    else if (ev.key === \"ArrowRight\") $09e991522ca7e64e$var$game.moveRight();\n    else if (ev.key === \"ArrowLeft\") $09e991522ca7e64e$var$game.moveLeft();\n    if ($09e991522ca7e64e$var$game.isGameOver()) $09e991522ca7e64e$var$game.status = \"lose\";\n    $09e991522ca7e64e$var$render();\n});\n$09e991522ca7e64e$var$buttonStart.addEventListener(\"click\", ()=>{\n    $09e991522ca7e64e$var$game.start();\n    $09e991522ca7e64e$var$render();\n    $09e991522ca7e64e$var$buttonStart.textContent = \"Restart\";\n    $09e991522ca7e64e$var$buttonStart.classList.remove(\"start\");\n    $09e991522ca7e64e$var$buttonStart.classList.add(\"restart\");\n});\n\n\n//# sourceMappingURL=index.b54d8b52.js.map\n","'use strict';\n\nimport Game from '../modules/Game.class';\n\nconst game = new Game();\n\nconst fieldElement = document.querySelector('.game-field tbody');\nconst scoreElement = document.querySelector('.game-score');\nconst messageElements = document.querySelectorAll(\n  '.message-container .message',\n);\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst messageStart = document.querySelector('.message-start');\nconst buttonStart = document.querySelector('.button.start');\n\nrender();\n\nfunction render() {\n  fieldElement.innerHTML = '';\n\n  const state = game.getState();\n\n  for (let row = 0; row < state.length; row++) {\n    const tr = document.createElement('tr');\n\n    tr.classList.add('field-row');\n\n    for (let col = 0; col < state[row].length; col++) {\n      const value = state[row][col];\n      const cell = document.createElement('td');\n\n      cell.classList.add('field-cell');\n\n      if (value !== 0) {\n        cell.textContent = value;\n        cell.classList.add(`field-cell--${value}`);\n      }\n      tr.appendChild(cell);\n    }\n    fieldElement.appendChild(tr);\n  }\n\n  scoreElement.textContent = game.getScore();\n\n  const stats = game.getStatus();\n\n  messageElements.forEach((el) => el.classList.add('hidden'));\n\n  if (stats === 'win') {\n    messageWin.classList.remove('hidden');\n  } else if (stats === 'lose') {\n    messageLose.classList.remove('hidden');\n  } else if (stats === 'idle') {\n    messageStart.classList.remove('hidden');\n    buttonStart.textContent = 'Start';\n    buttonStart.classList.add('start');\n    buttonStart.classList.remove('restart');\n  } else if (stats === 'playing') {\n    buttonStart.textContent = 'Restart';\n    buttonStart.classList.remove('start');\n    buttonStart.classList.add('restart');\n  }\n}\n\ndocument.addEventListener('keydown', (ev) => {\n  if (game.getStatus() !== 'playing') {\n    return;\n  }\n\n  if (ev.key === 'ArrowUp') {\n    game.moveUp();\n  } else if (ev.key === 'ArrowDown') {\n    game.moveDown();\n  } else if (ev.key === 'ArrowRight') {\n    game.moveRight();\n  } else if (ev.key === 'ArrowLeft') {\n    game.moveLeft();\n  }\n\n  if (game.isGameOver()) {\n    game.status = 'lose';\n  }\n\n  render();\n});\n\nbuttonStart.addEventListener('click', () => {\n  game.start();\n  render();\n  buttonStart.textContent = 'Restart';\n  buttonStart.classList.remove('start');\n  buttonStart.classList.add('restart');\n});\n","'use strict';\nclass Game {\n  constructor(initialState = null) {\n    this.board = initialState || this.createEmptyBoard();\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  createEmptyBoard() {\n    const board = [];\n\n    for (let i = 0; i < 4; i++) {\n      board.push([0, 0, 0, 0]);\n    }\n\n    return board;\n  }\n\n  moveLeft() {\n    const oldBoard = this.board.map((row) => [...row]);\n    let scoreThisMove = 0;\n\n    for (let i = 0; i < this.board.length; i++) {\n      const row = this.board[i];\n\n      const filtered = row.filter((cell) => cell !== 0);\n\n      const newRow = [];\n      let j = 0;\n\n      while (j < filtered.length) {\n        if (filtered[j] === filtered[j + 1]) {\n          const merged = filtered[j] * 2;\n\n          newRow.push(merged);\n          scoreThisMove += merged;\n          j += 2;\n        } else {\n          newRow.push(filtered[j]);\n          j += 1;\n        }\n      }\n\n      while (newRow.length < 4) {\n        newRow.push(0);\n      }\n\n      this.board[i] = newRow;\n    }\n\n    const boardChanged = this.board.some(\n      (row, i) => row.some((cell, j) => cell !== oldBoard[i][j]),\n      // eslint-disable-next-line\n    );\n\n    if (boardChanged) {\n      this.addRandomTile();\n      this.score += scoreThisMove;\n    }\n\n    if (this.board.some((row) => row.includes(2048))) {\n      this.status = 'win';\n    }\n  }\n  moveRight() {\n    const oldBoard = this.board.map((row) => [...row]);\n    let scoreThisMove = 0;\n\n    for (let i = 0; i < this.board.length; i++) {\n      const row = [...this.board[i]].reverse();\n\n      const filtered = row.filter((cell) => cell !== 0);\n\n      const newRow = [];\n      let j = 0;\n\n      while (j < filtered.length) {\n        if (filtered[j] === filtered[j + 1]) {\n          const merged = filtered[j] * 2;\n\n          newRow.push(merged);\n          scoreThisMove += merged;\n          j += 2;\n        } else {\n          newRow.push(filtered[j]);\n          j += 1;\n        }\n      }\n\n      while (newRow.length < 4) {\n        newRow.push(0);\n      }\n\n      this.board[i] = newRow.reverse();\n    }\n\n    const boardChanged = this.board.some(\n      (row, i) => row.some((cell, j) => cell !== oldBoard[i][j]),\n      // eslint-disable-next-line\n    );\n\n    if (boardChanged) {\n      this.addRandomTile();\n      this.score += scoreThisMove;\n    }\n\n    if (this.board.some((row) => row.includes(2048))) {\n      this.status = 'win';\n    }\n  }\n  moveUp() {\n    const oldBoard = this.board.map((row) => [...row]);\n    let scoreThisMove = 0;\n\n    for (let j = 0; j < 4; j++) {\n      const column = [];\n\n      for (let i = 0; i < 4; i++) {\n        column.push(this.board[i][j]);\n      }\n\n      const filtered = column.filter((cell) => cell !== 0);\n      const newColumn = [];\n      let index = 0;\n\n      while (index < filtered.length) {\n        if (filtered[index] === filtered[index + 1]) {\n          const merged = filtered[index] * 2;\n\n          newColumn.push(merged);\n          scoreThisMove += merged;\n          index += 2;\n        } else {\n          newColumn.push(filtered[index]);\n          index += 1;\n        }\n      }\n\n      while (newColumn.length < 4) {\n        newColumn.push(0);\n      }\n\n      for (let i = 0; i < 4; i++) {\n        this.board[i][j] = newColumn[i];\n      }\n    }\n\n    const boardChanged = this.board.some(\n      (row, i) => row.some((cell, j) => cell !== oldBoard[i][j]),\n      // eslint-disable-next-line\n    );\n\n    if (boardChanged) {\n      this.addRandomTile();\n      this.score += scoreThisMove;\n    }\n\n    if (this.board.some((row) => row.includes(2048))) {\n      this.status = 'win';\n    }\n  }\n  moveDown() {\n    const oldBoard = this.board.map((row) => [...row]);\n    let scoreThisMove = 0;\n\n    for (let j = 0; j < 4; j++) {\n      const column = [];\n\n      for (let i = 0; i < 4; i++) {\n        column.push(this.board[i][j]);\n      }\n\n      const filtered = column.filter((cell) => cell !== 0);\n      const newColumn = [];\n      let index = filtered.length - 1;\n\n      while (index >= 0) {\n        if (filtered[index] === filtered[index - 1]) {\n          const merged = filtered[index] * 2;\n\n          newColumn.unshift(merged);\n          scoreThisMove += merged;\n          index -= 2;\n        } else {\n          newColumn.unshift(filtered[index]);\n          index -= 1;\n        }\n      }\n\n      while (newColumn.length < 4) {\n        newColumn.unshift(0);\n      }\n\n      for (let i = 0; i < 4; i++) {\n        this.board[i][j] = newColumn[i];\n      }\n    }\n\n    const boardChanged = this.board.some(\n      (row, i) => row.some((cell, j) => cell !== oldBoard[i][j]),\n      // eslint-disable-next-line\n    );\n\n    if (boardChanged) {\n      this.addRandomTile();\n      this.score += scoreThisMove;\n    }\n\n    if (this.board.some((row) => row.includes(2048))) {\n      this.status = 'win';\n    }\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.board;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.board = this.createEmptyBoard();\n    this.score = 0;\n    this.status = 'playing';\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 0) {\n          emptyCells.push({ row, col });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const randomIndex = Math.floor(Math.random() * emptyCells.length);\n      const { row, col } = emptyCells[randomIndex];\n\n      const value = Math.random() < 0.9 ? 2 : 4;\n\n      this.board[row][col] = value;\n    }\n  }\n\n  isGameOver() {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (this.board[i][j] === 0) {\n          return false;\n        }\n\n        if (j < 3 && this.board[i][j] === this.board[i][j + 1]) {\n          return false;\n        }\n\n        if (i < 3 && this.board[i][j] === this.board[i + 1][j]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  restart() {\n    this.start();\n  }\n}\n\nmodule.exports = Game;\n"],"names":["a","$a5fd07fa01589658$exports","$09e991522ca7e64e$var$game","constructor","initialState","board","createEmptyBoard","score","status","i","push","moveLeft","oldBoard","map","row","scoreThisMove","length","filtered","filter","cell","newRow","j","merged","some","addRandomTile","includes","moveRight","reverse","moveUp","column","newColumn","index","moveDown","unshift","getScore","getState","getStatus","start","emptyCells","col","randomIndex","Math","floor","random","value","isGameOver","restart","__esModule","default","$09e991522ca7e64e$var$fieldElement","document","querySelector","$09e991522ca7e64e$var$scoreElement","$09e991522ca7e64e$var$messageElements","querySelectorAll","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$buttonStart","$09e991522ca7e64e$var$render","innerHTML","state","tr","createElement","classList","add","textContent","appendChild","stats","forEach","el","remove","addEventListener","ev","key"],"version":3,"file":"index.b54d8b52.js.map"}